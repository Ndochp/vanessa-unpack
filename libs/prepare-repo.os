////////////////////////////////////////////////////////////////////////////////
// Вспомогательная утилита получения файла AUTHORS из хранилища 1С
//

Перем Распаковщик;
Перем мПараметры;
Перем юТест;

Процедура ПодключитьРаспаковщик()
	
	Если Распаковщик = Неопределено Тогда
		ПодключитьСценарий(АбсолютныйПуть("unpack.os"), "Распаковщик");
		Распаковщик = Новый Распаковщик;
	КонецЕсли;
	
КонецПроцедуры

Функция АбсолютныйПуть(Знач ОтносительныйПуть)
	
	Каталог = Новый Файл(ТекущийСценарий().Источник).Путь;
	Возврат Каталог + "\" + ОтносительныйПуть;
	
КонецФункции

Процедура КлонироватьУдаленныйРепо()
	ПодключитьРаспаковщик();
	Распаковщик.РежимОтладки(Истина);
	Распаковщик.Инициализация(Распаковщик.ПолучитьПараметрыИнициализации());
	
	РепоКлонирован = Распаковщик.КлонироватьРепозитарий(мПараметры.ВыходнойКаталог, мПараметры.URLУдаленногоРепо);
	Если Не РепоКлонирован Тогда
		Сообщить("Удаленный репозиторий не удалось клонировать");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьФайлAUTHORS()
	
	ФайлХранилища = Новый Файл(мПараметры.ФайлХранилища);
	Если Не ФайлХранилища.Существует() Тогда
		ВызватьИсключение "Файл хранилища <" + ФайлХранилища.ПолноеИмя + "> не существует.";
	КонецЕсли;
	
	Каталог = мПараметры.ВыходнойКаталог;
	ФайлАвторов = Новый Файл(Каталог + "\AUTHORS");
	Если ФайлАвторов.Существует() Тогда
		Сообщить("Файл " + ФайлАвторов.ПолноеИмя + " уже существует. Пропускаем генерацию файла AUTHORS");
		Возврат;
	КонецЕсли;
	
	ПодключитьРаспаковщик();
	
	Попытка
		ПараметрыИнициализации = Распаковщик.ПолучитьПараметрыИнициализации();
		ПараметрыИнициализации.ДоменПочтыДляGit = мПараметры.ДоменПочты;
		Распаковщик.Инициализация(ПараметрыИнициализации);
		
		Сообщить("Формирую файл в каталоге " + Каталог);
		Распаковщик.СформироватьПервичныйФайлПользователейДляGit(ФайлХранилища.ПолноеИмя, ФайлАвторов.ПолноеИмя);
		Сообщить("Файл сгенерирован");
		
	Исключение
		Сообщить("ОШИБКА: Не удалось сформировать файл авторов");
		Распаковщик.УдалитьЗарегистрированныеВременныеФайлы();
		ВызватьИсключение;
	КонецПопытки;
	Распаковщик.УдалитьЗарегистрированныеВременныеФайлы();
	
КонецПроцедуры

Процедура СгенерироватьФайлVERSION()
	
	ПодключитьРаспаковщик();
	
	ФайлВерсий = Новый Файл(мПараметры.ВыходнойКаталог + "\VERSION");
	Если ФайлВерсий.Существует() Тогда
		Сообщить("Файл " + ФайлВерсий.ПолноеИмя + " уже существует. Пропускаем генерацию файла VERSION");
		Возврат;
	КонецЕсли;
	
	Распаковщик.ЗаписатьФайлВерсийГит(мПараметры.ВыходнойКаталог);
	Распаковщик.УдалитьЗарегистрированныеВременныеФайлы();
	
КонецПроцедуры

Процедура ПоказатьВозможныеАргументы()
	
	Сообщить("Для получения файла авторов из хранилища 1С задайте аргументы:
	|<КаталогХранилища1С> <ДоменПочты> <ЛокальныйРепо> <URLУдаленногоРепо>");
	
КонецПроцедуры

Процедура ПрочитатьПараметры()

	мПараметры = Новый Структура;
	мПараметры.Вставить("ФайлХранилища", АргументыКоманднойСтроки[0] + "\1cv8ddb.1CD");
	мПараметры.Вставить("ДоменПочты", АргументыКоманднойСтроки[1]);
	мПараметры.Вставить("ВыходнойКаталог", АргументыКоманднойСтроки[2]);
	мПараметры.Вставить("URLУдаленногоРепо", АргументыКоманднойСтроки[3]);
	
КонецПроцедуры

Процедура ОбработатьПараметрыИВыполнитьЗадачу()

	Если АргументыКоманднойСтроки.Количество() <> 4 Тогда	
		ПоказатьВозможныеАргументы();
		ЗавершитьРаботу(1);
	Иначе
		ПрочитатьПараметры();
		КлонироватьУдаленныйРепо();
		СгенерироватьФайлAUTHORS();
		СгенерироватьФайлVERSION();
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Юнит-тестирование

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;

	ИнициализироватьТестовыеПараметры();
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_КлонироватьУдаленныйРепо");
	СписокТестов.Добавить("Тест_СгенерироватьФайлАвторов");
	СписокТестов.Добавить("Тест_СгенерироватьФайлВерсий");
	
	Возврат СписокТестов;
	
КонецФункции

Процедура Тест_КлонироватьУдаленныйРепо() Экспорт
	КлонироватьУдаленныйРепо();
КонецПроцедуры

Процедура Тест_СгенерироватьФайлАвторов() Экспорт

	ПолноеИмяФайлаАвторов = мПараметры.ВыходнойКаталог + "\AUTHORS";
	ФайлАвторов = Новый Файл(ПолноеИмяФайлаАвторов);
	Сообщить("Файл авторов: " + ФайлАвторов.ПолноеИмя);
	юТест.ПроверитьЛожь(ФайлАвторов.Существует(), "Не должно быть файла AUTHORS в выходном каталоге");
	СгенерироватьФайлAUTHORS();
	юТест.ПроверитьИстину(ФайлАвторов.Существует(), "Должен быть файл AUTHORS в выходном каталоге");
	УдалитьФайлы(ФайлАвторов.ПолноеИмя);
	
КонецПроцедуры

Процедура Тест_СгенерироватьФайлВерсий() Экспорт
	
	ФайлАвторов = Новый Файл(мПараметры.ВыходнойКаталог + "\VERSION");
	Сообщить("Файл версий: " + ФайлАвторов.ПолноеИмя); 
	юТест.ПроверитьЛожь(ФайлАвторов.Существует(), "Не должно быть файла VERSION в выходном каталоге");
	СгенерироватьФайлVERSION();
	юТест.ПроверитьИстину(ФайлАвторов.Существует(), "Должен быть файл VERSION в выходном каталоге");
	УдалитьФайлы(ФайлАвторов.ПолноеИмя);
	
КонецПроцедуры

Процедура ИнициализироватьТестовыеПараметры()
	
	ПутьКФайлуХранилища1С = Новый Файл("testData\ТестовыйФайлХранилища1С.1CD");
	
	ВремКаталог = КаталогВременныхФайлов() + "\" + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ВремКаталог);
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ФайлХранилища", ПутьКФайлуХранилища1С.ПолноеИмя);
	мПараметры.Вставить("ДоменПочты"   , "silverbulleters.org");
	мПараметры.Вставить("ВыходнойКаталог", ВремКаталог);
	мПараметры.Вставить("URLУдаленногоРепо", "http://stash.maxus.lan:7990/scm/aut/v83unpack.git");
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

	Попытка	
		УдалитьФайлы(мПараметры.ВыходнойКаталог);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоЗапускТестов()
	Возврат СтартовыйСценарий().Источник <> ТекущийСценарий().Источник;
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Точка входа

Если Не ЭтоЗапускТестов() Тогда	
	ОбработатьПараметрыИВыполнитьЗадачу();
КонецЕсли;
